import { create } from "zustand";

type Quiz = {
  score: number;
  calculateScore: () => void;
  inc: () => void;
  dec: () => void;
  currentQuestionIndex: number;
  nextQuestion: () => void;
  backQuestion: () => void;
  setAnswer: (questionIndex: number, answerIndex: number) => void;
  removeAnswer: (questionIndex: number) => void;
  questions: {
    question: string;
    options: string[];
    correctAnswer: number;
  }[];
  userAnswers: (number | undefined)[];
  reset: () => void;
};

const quizData = [
  {
    question: "üìµ Qual √© a regra geral sobre o uso do celular enquanto dirige?",
    options: [
      "√â seguro, desde que voc√™ esteja usando um aplicativo de GPS.",
      "√â permitido, desde que voc√™ esteja no modo viva-voz.",
      "√â ilegal e perigoso.",
      "√â permitido com o uso de fones de ouvido.",
    ],
    correctAnswer: 2,
  },
  {
    question: "O que fazer ao testemunhar um acidente de tr√¢nsito com v√≠timas?",
    options: [
      "Parar e bloquear a via para proteger os envolvidos.",
      "Ligar para os servi√ßos de emerg√™ncia e prestar os primeiros socorros, se poss√≠vel.",
      "Ligar para os servi√ßos de emerg√™ncia, e sinalizar a batida.",
      "Continuar o trajeto e n√£o se envolver.",
    ],
    correctAnswer: 2,
  },
  // {
  //   question: "O uso de equipamento de reten√ß√£o adequado (beb√™ conforto, cadeirinha ou assento de eleva√ß√£o) √© obrigat√≥rio em crian√ßas de:",
  //   options: [
  //     "At√© 5 anos ou com at√© 1,15 m de altura.",
  //     "At√© 6 anos e meio ou com at√© 1,25 m de altura.",
  //     "At√© 10 anos ou com at√© 1,45 m de altura.",
  //     "At√© 8 anos ou com at√© 1,35 m de altura.",
  //   ],
  //   correctAnswer: 2,
  // },
  // {
  //   question: "Em um cruzamento sem sinaliza√ß√£o ou placas, quem tem a prefer√™ncia?",
  //   options: [
  //     "O ve√≠culo maior.",
  //     "O ve√≠culo mais veloz.",
  //     "O ve√≠culo que chegou primeiro ao cruzamento.",
  //     "O ve√≠culo que estiver √† direita do condutor.",
  //   ],
  //   correctAnswer: 3,
  // },
  // {
  //   question: "üõë Qual √© a velocidade m√°xima permitida em uma via urbana n√£o sinalizada?",
  //   options: [
  //     "40 km/h.",
  //     "70 km/h.",
  //     "60 km/h.",
  //     "80 km/h.",
  //   ],
  //   correctAnswer: 2,
  // },
  // {
  //   question: "üöó Em que situa√ß√µes o uso de farol baixo √© obrigat√≥rio para ve√≠culos durante o dia?",
  //   options: [
  //     "Em rodovias de pista simples situadas fora dos per√≠metros urbanos.",
  //     "Em qualquer condi√ß√£o de chuva, granizo, neblina ou cerra√ß√£o.",
  //     "Em t√∫neis com ilumina√ß√£o p√∫blica.",
  //     "Todas as op√ß√µes acima.",
  //   ],
  //   correctAnswer: 3,
  // },
  // {
  //   question: "üõ£ Quando a rodovia possui tr√™s ou mais faixas de tr√¢nsito no mesmo sentido, quais s√£o destinadas aos ve√≠culos que desenvolvem velocidade maior?",
  //   options: [
  //     "Faixas da direita.",
  //     "Faixa central.",
  //     "Faixas da esquerda.",
  //     "Todas as op√ß√µes acima.",
  //   ],
  //   correctAnswer: 2,
  // },
];

export const useQuiz = create<Quiz>()((set, get) => ({
  score: 0,
  calculateScore: () => {
    const { userAnswers, questions } = get();
    const score = questions.reduce((acc, question, index) => {
      if (userAnswers[index] === question.correctAnswer) {
        return acc + 1;
      }

      return acc;
    }, 0);
    set({ score });
  },
  inc: () => set((state) => ({ score: state.score + 1 })),
  dec: () => set((state) => ({ score: state.score - 1 })),
  currentQuestionIndex: 0,
  nextQuestion: () =>
    set((state) => ({ currentQuestionIndex: state.currentQuestionIndex + 1 })),
  backQuestion: () =>
    set((state) => ({ currentQuestionIndex: state.currentQuestionIndex - 1 })),
  setAnswer: (questionIndex, answerIndex) =>
    set((state) => {
      const userAnswers = [...state.userAnswers]; // copia array
      userAnswers[questionIndex] = answerIndex; // atualiza resposta
      console.log(userAnswers);
      return { userAnswers }; // retorna novo estado
    }),
  removeAnswer: (questionIndex) =>
    set((state) => {
      const userAnswers = [...state.userAnswers];
      userAnswers[questionIndex] = undefined;
      return { userAnswers };
    }),
  questions: quizData,
  userAnswers: [],
  reset: () => set({ score: 0, currentQuestionIndex: 0, userAnswers: [] }),
}));
